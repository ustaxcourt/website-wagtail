name: Deploy

on:
  push:
    branches:
      - development

jobs:
  deploy:
    environment: ${{ github.ref_name }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.6
          terraform_wrapper: false

      - name: Set up Python
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip
          python3 --version
          pip3 --version

      - name: Apply Terraform
        id: tf_outputs
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd infra
          ./setup-tf-buckets.sh
          ./deploy.sh
          bastion_ip=$(terraform output -raw bastion_public_ip)
          db_endpoint=$(terraform output -raw database_endpoint)
          echo "bastion_public_ip=${bastion_ip}" >> $GITHUB_OUTPUT
          echo "database_endpoint=${db_endpoint}" >> $GITHUB_OUTPUT

      - name: Set up ENV & SSH Key
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd infra
          . ./load-secrets.sh
          cd ..
          echo "DATABASE_PASSWORD=$DATABASE_PASSWORD" >> $GITHUB_ENV
          mkdir -p .ssh
          echo "${BASTION_PRIVATE_KEY}" | base64 --decode > .ssh/id_rsa
          chmod 600 .ssh/id_rsa
          cat .ssh/id_rsa

      - name: Run Migrations
        env:
          BASTION_HOST_IP: ${{ steps.tf_outputs.outputs.bastion_public_ip }}
          DATABASE_HOSTNAME: ${{ steps.tf_outputs.outputs.database_endpoint }}
        run: |
          cd website
          set -e
          ssh-keyscan -H ${BASTION_HOST_IP} > /tmp/known_hosts
          ssh -o UserKnownHostsFile=/tmp/known_hosts -L 5432:${DATABASE_HOSTNAME} -N -i ../.ssh/id_rsa ubuntu@${BASTION_HOST_IP} &
          pip3 install -r requirements.txt
          export DATABASE_URL="postgresql://master:${DATABASE_PASSWORD}@localhost:5432/postgres"
          python3 manage.py migrate

      - name: Manually Deploy ECS Task (Post-Migration)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          taskArn=$(aws ecs list-task-definitions \
            --family-prefix website-tasks \
            --sort DESC \
            --region us-east-1 \
            --query 'taskDefinitionArns[0]' \
            --output text
          )

          aws ecs update-service \
            --cluster website-cluster \
            --service website-service \
            --task-definition "${taskArn}" \
            --desired-count 1 \
            --force-new-deployment \
            --region us-east-1
