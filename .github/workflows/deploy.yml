name: Deploy

on:
  push:
    branches:
      - main
    paths:
      - 'website/**'
      - 'infra/**'
    tags:
      - 'sandbox'
      - 'development'

jobs:
  deploy:
    environment: ${{ github.ref == 'refs/tags/development' && 'development' || github.ref == 'refs/tags/sandbox' && format('{0}_sandbox', github.actor) || github.ref == 'refs/heads/main' && 'development' || '' }}
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Set Environment
        id: set_env
        run: |
          if [[ "${{ github.ref }}" == refs/tags/sandbox ]]; then
            echo "ENVIRONMENT=sandbox" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == refs/tags/development ]]; then
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          else
            echo "Debug: No matching condition found"
            exit 1
          fi

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.6
          terraform_wrapper: false

      - name: Set up Python
        uses: ./.github/actions/setup-python

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          # Examples: 12.x, 10.15.1, >=10.15.0, lts/Hydrogen, 16-nightly, latest, node
          node-version: '20.x'

      - name: Build USWDS
        run: |
          cd website
          make setup

      - name: Generate Release Tag
        if: ${{ github.ref == 'refs/heads/main' }}
        id: current_date
        run: echo "DATE=$(date +'%Y.%m.%d.%H%M')" >> $GITHUB_OUTPUT

      - name: Apply Terraform
        id: tf_outputs
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd infra
          ./setup-tf-buckets.sh

          # Pass GitHub SHA to Terraform
          export TF_VAR_github_sha=$GITHUB_SHA

          ./deploy.sh

          bastion_ip=$(terraform output -raw bastion_public_ip)
          echo "bastion_public_ip=${bastion_ip}" >> $GITHUB_OUTPUT

          db_endpoint=$(terraform output -raw database_endpoint)
          echo "database_endpoint=${db_endpoint}" >> $GITHUB_OUTPUT

          bucket_name=$(terraform output -raw bucket_name)
          echo "bucket_name=${bucket_name}" >> $GITHUB_OUTPUT

      - name: Set up SSH Key
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd infra
          . ./load-secrets.sh
          cd ..
          echo "DATABASE_PASSWORD=$DATABASE_PASSWORD" >> $GITHUB_ENV
          echo "::add-mask::${DATABASE_PASSWORD}" # prevent the password from logging out
          echo "DJANGO_SUPERUSER_PASSWORD=$DJANGO_SUPERUSER_PASSWORD" >> $GITHUB_ENV
          echo "::add-mask::${DJANGO_SUPERUSER_PASSWORD}" # prevent the password from logging out
          mkdir -p .ssh
          echo "${BASTION_PRIVATE_KEY}" | base64 --decode > .ssh/id_rsa
          chmod 600 .ssh/id_rsa

      - name: Run Migrations
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BASTION_HOST_IP: ${{ steps.tf_outputs.outputs.bastion_public_ip }}
          DATABASE_HOSTNAME: ${{ steps.tf_outputs.outputs.database_endpoint }}
          AWS_STORAGE_BUCKET_NAME: ${{ steps.tf_outputs.outputs.bucket_name }}
        run: |
          cd website
          # setup the tunnel so that we can run django commands into the env database
          set -e
          ssh-keyscan -H ${BASTION_HOST_IP} > /tmp/known_hosts
          ssh -o UserKnownHostsFile=/tmp/known_hosts -L 5432:${DATABASE_HOSTNAME} -N -i ../.ssh/id_rsa ubuntu@${BASTION_HOST_IP} &
          export DATABASE_URL="postgresql://master:${DATABASE_PASSWORD}@localhost:5432/postgres"
          # run migration and other commands
          make migrate
          make superuser settings="app.settings.${ENVIRONMENT}"|| echo "user already exists, skipping"
          make resetadminpassword settings="app.settings.${ENVIRONMENT}"
          make createpages settings="app.settings.${ENVIRONMENT}"

      # TODO: disabling for now because of An error occurred (IncorrectInstanceState) when calling the StopInstances operation: This instance 'i-02e10df312188338c' is not in a state from which it can be stopped.
      # TODO: disable this for security reasons
      # - name: Turn off Bastion Host
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #   run: |
      #     cd infra
      #     ./disable-bastion-host.sh
      #

      - name: Create GitHub Release (optional)
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.current_date.outputs.DATE }}
          release_name: ${{ steps.current_date.outputs.DATE }}
          draft: false
          prerelease: false
          body: ${{ github.event.pull_request.title || 'No PR title available.' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Manually Deploy ECS Task (Post-Migration)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          taskArn=$(aws ecs list-task-definitions \
            --family-prefix "${ENVIRONMENT}-website-tasks" \
            --sort DESC \
            --region us-east-1 \
            --query 'taskDefinitionArns[0]' \
            --output text
          )

          aws ecs update-service \
            --cluster "${ENVIRONMENT}-website-cluster" \
            --service "${ENVIRONMENT}-website-service" \
            --task-definition "${taskArn}" \
            --desired-count 1 \
            --force-new-deployment \
            --region us-east-1

      - name: Perform Production Checks in staging
        if: ${{ env.ENVIRONMENT == 'dev' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BASTION_HOST_IP: ${{ steps.tf_outputs.outputs.bastion_public_ip }}
          DATABASE_HOSTNAME: ${{ steps.tf_outputs.outputs.database_endpoint }}
          AWS_STORAGE_BUCKET_NAME: ${{ steps.tf_outputs.outputs.bucket_name }}
        run: |
          cd website
          # setup the tunnel so that we can run django commands into the env database
          set -e
          ssh-keyscan -H ${BASTION_HOST_IP} > /tmp/known_hosts
          ssh -o UserKnownHostsFile=/tmp/known_hosts -L 5432:${DATABASE_HOSTNAME} -N -i ../.ssh/id_rsa ubuntu@${BASTION_HOST_IP} &
          export DATABASE_URL="postgresql://master:${DATABASE_PASSWORD}@localhost:5432/postgres"
          make production-checks settings="app.settings.${ENVIRONMENT}"
