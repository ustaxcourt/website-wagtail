name: Deploy

on:
  push:
    tags:
      - 'sandbox'
      - 'development'
      - 'test'

jobs:
  deploy:
    environment: ${{ github.ref == 'refs/tags/development' && 'development' || github.ref == 'refs/tags/test' && 'test' || github.ref == 'refs/tags/cody-sandbox' && 'cody-sandbox' }}
    runs-on: ubuntu-latest
    steps:
      - name: Set Environment
        id: set_env
        run: |
          ACTORNAME="${{ github.actor }}"
          TAG_NAME="${{ github.ref_name }}"
          echo "DEPLOY_ENVIRONMENT=${TAG_NAME}" >> $GITHUB_ENV
          if [[ "${{ github.ref }}" == refs/tags/sandbox ]]; then
            echo "ENVIRONMENT=${ACTORNAME}_${TAG_NAME}" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == refs/tags/development ]]; then
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == refs/tags/test ]]; then
            echo "ENVIRONMENT=test" >> $GITHUB_ENV
          else
            echo "Debug: No matching condition found"
            exit 1
          fi
          cat $GITHUB_ENV
          exit 1

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.6
          terraform_wrapper: false

      - name: Set up Python
        uses: ./.github/actions/setup-python
        with:
          python-version-file: website/.python-version

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          # Examples: 12.x, 10.15.1, >=10.15.0, lts/Hydrogen, 16-nightly, latest, node
          node-version: '20.x'

      - name: Build USWDS
        run: |
          cd website
          make setup

      - name: Apply Terraform
        id: tf_outputs
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd infra
          ./setup-tf-buckets.sh
          ./deploy.sh
          bastion_ip=$(terraform output -raw bastion_public_ip)
          db_endpoint=$(terraform output -raw database_endpoint)
          echo "bastion_public_ip=${bastion_ip}" >> $GITHUB_OUTPUT
          echo "database_endpoint=${db_endpoint}" >> $GITHUB_OUTPUT

      - name: Set up SSH Key
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd infra
          . ./load-secrets.sh
          cd ..
          echo "DATABASE_PASSWORD=$DATABASE_PASSWORD" >> $GITHUB_ENV
          echo "::add-mask::${DATABASE_PASSWORD}" # prevent the password from logging out
          echo "SUPERUSER_PASSWORD=$SUPERUSER_PASSWORD" >> $GITHUB_ENV
          echo "::add-mask::${SUPERUSER_PASSWORD}" # prevent the password from logging out
          mkdir -p .ssh
          echo "${BASTION_PRIVATE_KEY}" | base64 --decode > .ssh/id_rsa
          chmod 600 .ssh/id_rsa

      - name: Run Migrations
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BASTION_HOST_IP: ${{ steps.tf_outputs.outputs.bastion_public_ip }}
          DATABASE_HOSTNAME: ${{ steps.tf_outputs.outputs.database_endpoint }}
        run: |
          cd website
          set -e
          ssh-keyscan -H ${BASTION_HOST_IP} > /tmp/known_hosts
          ssh -o UserKnownHostsFile=/tmp/known_hosts -L 5432:${DATABASE_HOSTNAME} -N -i ../.ssh/id_rsa ubuntu@${BASTION_HOST_IP} &
          export DATABASE_URL="postgresql://master:${DATABASE_PASSWORD}@localhost:5432/postgres"
          make migrate
          make superuser settings="app.settings.${DEPLOY_ENVIRONMENT}"|| echo "user already exists, skipping"
          make resetadminpassword settings="app.settings.${DEPLOY_ENVIRONMENT}"
          make createpages settings="app.settings.${DEPLOY_ENVIRONMENT}"
          make users group="Editors"
          make users group="Moderators"

      # TODO: disabling for now because of An error occurred (IncorrectInstanceState) when calling the StopInstances operation: This instance 'i-02e10df312188338c' is not in a state from which it can be stopped.
      # TODO: disable this for security reasons
      # - name: Turn off Bastion Host
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #   run: |
      #     cd infra
      #     ./disable-bastion-host.sh
      #

      - name: Manually Deploy ECS Task (Post-Migration)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          taskArn=$(aws ecs list-task-definitions \
            --family-prefix "${ENVIRONMENT}-website-tasks" \
            --sort DESC \
            --region us-east-1 \
            --query 'taskDefinitionArns[0]' \
            --output text
          )

          aws ecs update-service \
            --cluster "${ENVIRONMENT}-website-cluster" \
            --service "${ENVIRONMENT}-website-service" \
            --task-definition "${taskArn}" \
            --desired-count 1 \
            --force-new-deployment \
            --region us-east-1
