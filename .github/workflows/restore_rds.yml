name: Manual RDS Restore from Snapshot

# Trigger the workflow manually from the Actions tab
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        required: true
        type: choice
        options:
          - sandbox
          - dev
          - production
        default: 'sandbox'
      source_instance_id:
        description: 'Source RDS Instance ID'
        required: true
        type: string
      snapshot_id:
        description: 'RDS Snapshot ID to restore from'
        required: true
        type: string
      apply_migration:
        description: 'Apply Database Migrations after restore?'
        required: false
        type: choice
        options:
          - 'No'
          - 'Yes'
        default: 'No'

jobs:
  rds-restore:
    environment: ${{ github.event.inputs.environment == 'development' && 'development' || github.event.inputs.environment == 'sandbox' && format('{0}_sandbox', github.actor) || github.event.inputs.environment == 'production' && 'production' || '' }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set Environment Variable
        run: echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Run RDS Restore Script
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        shell: bash
        run: |
          ./infra/restore-rds.sh \
            "${{ github.event.inputs.source_instance_id }}" \
            "${{ github.event.inputs.snapshot_id }}"

      - name: Set up SSH Key
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd infra
          . ./load-secrets.sh
          cd ..
          echo "DATABASE_PASSWORD=$DATABASE_PASSWORD" >> $GITHUB_ENV
          echo "::add-mask::${DATABASE_PASSWORD}"
          echo "DJANGO_SUPERUSER_PASSWORD=$DJANGO_SUPERUSER_PASSWORD" >> $GITHUB_ENV
          echo "::add-mask::${DJANGO_SUPERUSER_PASSWORD}"
          echo "SECRET_KEY=$SECRET_KEY" >> $GITHUB_ENV
          echo "::add-mask::${SECRET_KEY}"
          echo "DATABASE_HOSTNAME=$DATABASE_HOSTNAME" >> $GITHUB_ENV
          echo "::add-mask::${DATABASE_HOSTNAME}"
          echo "BASTION_HOST_IP=$BASTION_HOST_IP" >> $GITHUB_ENV
          echo "::add-mask::${BASTION_HOST_IP}"
          mkdir -p .ssh
          echo "${BASTION_PRIVATE_KEY}" | base64 --decode > .ssh/id_rsa
          chmod 600 .ssh/id_rsa

      - name: Run Migrations (Conditional)
        if: github.event.inputs.apply_migration == 'Yes'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd website
          set -e

          ssh-keyscan -H ${BASTION_HOST_IP} > /tmp/known_hosts
          ssh -o UserKnownHostsFile=/tmp/known_hosts -L 5432:${DATABASE_HOSTNAME} -N -i ../.ssh/id_rsa ubuntu@${BASTION_HOST_IP} &
          export DATABASE_URL="postgresql://master:${DATABASE_PASSWORD}@localhost:5432/postgres"
          echo "Running migrations..."
          make migrate
          make createpages settings="app.settings.${ENVIRONMENT}"
