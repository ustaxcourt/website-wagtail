"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import sys
import dj_database_url
import json
import urllib.request
from pythonjsonlogger import jsonlogger


PROJECT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = os.path.dirname(PROJECT_DIR)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

AUTHENTICATION_BACKENDS = [
    "social_core.backends.azuread_tenant.AzureADTenantOAuth2",
    "django.contrib.auth.backends.ModelBackend",
]


INSTALLED_APPS = [
    "home",
    "wagtail.contrib.forms",
    "wagtail.contrib.redirects",
    "wagtail.embeds",
    "wagtail.sites",
    "wagtail.users",
    "wagtail.snippets",
    "wagtail.documents",
    "wagtail.images",
    "wagtail.search",
    "wagtail.admin",
    "wagtail.contrib.routable_page",
    "wagtail.contrib.settings",
    "wagtail.contrib.typed_table_block",
    "wagtail",
    "modelcluster",
    "taggit",
    "storages",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.sitemaps",
    "django.contrib.staticfiles",
    "fontawesomefree",
    "social_django",
    "wagtail.contrib.frontend_cache",
]

MIDDLEWARE = [
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "wagtail.contrib.redirects.middleware.RedirectMiddleware",
]

if os.getenv("CLOUDFRONT_DISTRIBUTION_ID"):
    WAGTAILFRONTENDCACHE = {
        "cloudfront": {
            "BACKEND": "wagtail.contrib.frontend_cache.backends.CloudfrontBackend",
            "DISTRIBUTION_ID": os.getenv("CLOUDFRONT_DISTRIBUTION_ID"),
        }
    }


ROOT_URLCONF = "app.urls"

DATA_UPLOAD_MAX_NUMBER_FIELDS = 10_000

LOGIN_REDIRECT_URL = "/admin/"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(PROJECT_DIR, "templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "wagtail.contrib.settings.context_processors.settings",
                "app.context_processors.build_info",
                "social_django.context_processors.backends",
                "social_django.context_processors.login_redirect",
            ],
        },
    },
]

SOCIAL_AUTH_AZUREAD_TENANT_OAUTH2_KEY = os.getenv(
    "SOCIAL_AUTH_AZUREAD_TENANT_OAUTH2_KEY"
)
SOCIAL_AUTH_AZUREAD_TENANT_OAUTH2_SECRET = os.getenv(
    "SOCIAL_AUTH_AZUREAD_TENANT_OAUTH2_SECRET"
)
SOCIAL_AUTH_AZUREAD_TENANT_OAUTH2_TENANT_ID = os.getenv(
    "SOCIAL_AUTH_AZUREAD_TENANT_OAUTH2_TENANT_ID"
)
SOCIAL_AUTH_ADMIN_USER_SEARCH_FIELDS = ["username", "first_name", "last_name", "email"]
SOCIAL_AUTH_POSTGRES_JSONFIELD = True
SOCIAL_AUTH_USERNAME_IS_FULL_EMAIL = True

SOCIAL_AUTH_PIPELINE = (
    "social_core.pipeline.social_auth.social_details",  # Gets email, name, etc. from provider
    "social_core.pipeline.social_auth.social_uid",  # Gets the unique ID from the provider
    "social_core.pipeline.social_auth.auth_allowed",  # Checks if authentication is allowed (e.g., whitelists)
    "social_core.pipeline.social_auth.social_user",  # Tries to find a SocialAuth entry for this uid and load the associated user
    "app.settings.pipeline.associate_existing_user_by_email",
    "social_core.pipeline.user.get_username",  # Gets a username for new users (respects SOCIAL_AUTH_USERNAME_IS_FULL_EMAIL)
    # If associate_existing_user_by_email returned a user, this step might be skipped or adapt.
    "social_core.pipeline.user.create_user",  # Creates a new user *if no user was found or returned by previous steps*
    "social_core.pipeline.social_auth.associate_user",  # Associates the social account with the Django user (either found or newly created)
    "social_core.pipeline.social_auth.load_extra_data",  # Loads extra data from the provider
    "social_core.pipeline.user.user_details",  # Updates user model fields (like first_name, last_name) from provider data
)

WSGI_APPLICATION = "app.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
    }
}

DATABASE_URL = os.getenv("DATABASE_URL")

if DATABASE_URL:
    DATABASES["default"] = dj_database_url.parse(DATABASE_URL, conn_max_age=600)

WAGTAILADMIN_RICH_TEXT_EDITORS = {
    "default": {
        "WIDGET": "wagtail.admin.rich_text.DraftailRichTextArea",
        "OPTIONS": {
            "features": [
                "h2",
                "h3",
                "h4",
                "h5",
                "h6",
                "bold",
                "italic",
                "link",
                "document-link",
                "ul",
                "ol",
                "hr",
                "image",
                "embed",
                "code",
                "superscript",
                "subscript",
                "strikethrough",
                "blockquote",
            ]
        },
    },
    "secondary": {
        "WIDGET": "some.external.RichTextEditor",
    },
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

STATICFILES_DIRS = [
    os.path.join(PROJECT_DIR, "static"),
]

STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATIC_URL = "/static/"

MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = "/media/"

# Default storage settings, with the staticfiles storage updated.
# See https://docs.djangoproject.com/en/5.1/ref/settings/#std-setting-STORAGES
STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

aws_bucket_name = os.getenv("AWS_STORAGE_BUCKET_NAME")
if aws_bucket_name:
    print(f"Loading from base config, bucket: {aws_bucket_name}")
    STORAGES["default"] = {
        "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
        "OPTIONS": {
            "bucket_name": os.getenv("AWS_STORAGE_BUCKET_NAME"),
            "custom_domain": f"{os.getenv('DOMAIN_NAME')}/files",
            # "location": "files",  # This will prefix all uploads with 'files/'
            "querystring_auth": False,  # Disable query param auth since we're using CloudFront
            "url_protocol": "https:",
        },
    }
    AWS_STORAGE_BUCKET_NAME = aws_bucket_name
    AWS_S3_REGION_NAME = "us-east-1"
    WAGTAILDOCS_SERVE_METHOD = "direct"
    AWS_DEFAULT_ACL = None
    AWS_S3_ADDRESSING_STYLE = "path"
    AWS_S3_FILE_OVERWRITE = False

    # when running in github actions, we use access keys instead of assumed roles like on ECS
    if os.getenv("AWS_ACCESS_KEY_ID"):
        AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
        AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")

# Wagtail settings
WAGTAIL_SITE_NAME = "USTC Website"

# Search
# https://docs.wagtail.org/en/stable/topics/search/backends.html
WAGTAILSEARCH_BACKENDS = {
    "default": {
        "BACKEND": "wagtail.search.backends.database",
    }
}

# Allowed file extensions for documents in the document library.
# This can be omitted to allow all files, but note that this may present a security risk
# if untrusted users are allowed to upload files -
# see https://docs.wagtail.org/en/stable/advanced_topics/deploying.html#user-uploaded-files
WAGTAILDOCS_EXTENSIONS = [
    "csv",
    "docx",
    "key",
    "odt",
    "pdf",
    "pptx",
    "rtf",
    "txt",
    "xlsx",
    "zip",
]

WAGTAILDOCS_INLINE_CONTENT_TYPES = ["application/pdf", "text/plain", "video/mp4"]

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Add this setting to store your GA tracking ID
GOOGLE_ANALYTICS_ID = "G-3T6ZS0FHZ8"

ENVIRONMENT = "dev"

BASE_URL = "http://127.0.0.1:8000"

# GitHub SHA for build version
GITHUB_SHA = os.getenv("GITHUB_SHA")

EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

ALLOWED_HOSTS = [
    "localhost",
    "127.0.0.1",
    os.getenv("DOMAIN_NAME"),
    f"www.{os.getenv('DOMAIN_NAME')}",
]


def _task_ips():
    """Return the task's IPv4 address(es) from the ECS metadata API."""
    meta = os.getenv("ECS_CONTAINER_METADATA_URI_V4") or os.getenv(
        "ECS_CONTAINER_METADATA_URI"
    )
    if not meta:
        return []

    try:
        with urllib.request.urlopen(f"{meta}/task", timeout=0.2) as r:
            data = json.load(r)
            # First container in the task is usually "ours"
            nets = data["Containers"][0]["Networks"]
            return [ip for net in nets for ip in net["IPv4Addresses"]]
    except Exception:
        return []


ALLOWED_HOSTS += _task_ips()

USE_X_FORWARDED_HOST = True
SECRET_KEY = os.getenv("SECRET_KEY")
CSRF_TRUSTED_ORIGINS = [f'https://{os.getenv("DOMAIN_NAME")}']
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True

print(f"Finished base: BASE_URL: {BASE_URL}")


# Define log format
LOG_FORMAT = (
    "%(asctime)s %(levelname)s %(name)s %(module)s %(funcName)s:%(lineno)d %(message)s"
)

# Console handler that writes to STDOUT
aws_handler = {
    "class": "logging.StreamHandler",
    "formatter": "json",
    "level": "DEBUG",
    "stream": sys.stdout,
}

simple_handler = {
    "class": "logging.StreamHandler",
    "level": "DEBUG",
    "stream": sys.stdout,
}

# Base logging config
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "json": {
            "()": jsonlogger.JsonFormatter,
            "fmt": LOG_FORMAT,
        },
    },
    "handlers": {"aws": aws_handler, "simple": simple_handler},
    "root": {
        "handlers": ["aws"],
        "level": "WARNING",
    },
    "loggers": {
        "": {"level": "WARNING", "handlers": ["aws"]},
        # topmost logger for django-specific messages
        "django": {"level": "WARNING", "propagate": False, "handlers": ["aws"]},
        "django.request": {"level": "WARNING", "propagate": False, "handlers": ["aws"]},
        # topmost logger for wagtail-specific messages
        "wagtail": {"level": "WARNING", "propagate": False, "handlers": ["aws"]},
        # topmost logger our project-specific messages"
        "home": {"propagate": False, "level": "INFO", "handlers": ["aws"]},
        # management commands happen outside of AWS, so force simple logging
        "home.management.commands": {
            "propagate": False,
            "level": "INFO",
            "handlers": ["simple"],
        },
    },
}
